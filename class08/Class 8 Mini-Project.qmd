---
title: "Class 8 Mini-Project: Unsupervised Learning Analysis of Human Breast Cancer Cells"
author: "Sabrina Wu (A16731683)"
format: pdf
---
## Exploratory data analysis
### Importing Data
```{r}
# Save your input data file into your Project directory
fna.data <- "C:/Users/sabri/OneDrive/Desktop/BIMM 143/class08/WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
```

```{r}
head(wisc.df)
```

Removing the first column/diagnosis column and saving in new dataset 
```{r}
wisc.data <- wisc.df[,-1]
```
Saving the diagnosis column as a vector. `factor()` converts vector of values into a variable by assigning levels. 
```{r}
# Create diagnosis vector for later 
diagnosis <- factor(wisc.df$diagnosis)
```

>Q1. How many observations are in this dataset?

```{r}
nrow(wisc.data)
```
There are 569 observations in this dataset.

>Q2. How many of the observations have a malignant diagnosis?

```{r}
sum(diagnosis == "M")
```
212 of the observations have a malignant diagnosis. 

>Q3. How many variables/features in the data are suffixed with _mean?

`grep()` search for matches to a pattern

```{r}
length(grep("_mean",names(wisc.data)))
```
There are 10 variables with the suffix "_mean".

## Principal Component Analysis (PCA)
### Performing PCA

Check standard deviation to see if need to be scaled
```{r}
# Check column means and standard deviations
colMeans(wisc.data)
apply(wisc.data,2,sd)
```
Data should be scale since the mean and standard deviation varies a lot among the different variables from a few hundreds to hundredths. 


Performing PCA on scaled data.  

```{r}
#Rescaling wisc.data 
wisc.data.scaled <- scale(wisc.data)
```

```{r}
# Perform PCA 
wisc.pr <- prcomp(wisc.data.scaled)
```

```{r}
#Look at summary of results
summary(wisc.pr)
```
>Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

44.27% of the original variance is captured by PC1. 

>Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

```{r}
cumsum(summary(wisc.pr)$importance[2,])>=0.7
```
Three PCs are needed to describe at least 70% of the original variance in the data. 


>Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

```{r}
cumsum(summary(wisc.pr)$importance[2,])>=0.9
```
Seven PCs are needed to describe at least 90% of the original variance in the data. 

### Interpreting PCA Results

Creating biplot
```{r}
biplot(wisc.pr)
```
>Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

What stands out the most is that all the variables/pink vectors seems to be all pointing left/into the negative of PC1. This plot is difficult to understand as all the names are overlapping each other. 

Changing to scatterplots
```{r}
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis, xlab = "PC1", ylab = "PC2")
```

>Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[,1],wisc.pr$x[,3], col = diagnosis, xlab = "PC1", ylab = "PC3")
```
Both graphs seem to show that the red dots signifying malignant ones are more left than the benign ones on the axis of PC1. 


ggplot
```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=df$diagnosis) + 
  geom_point()
```

### Variance Explained

```{r}
# Calculate variance of each component by squaring standard deviation
pr.var <- wisc.pr$sdev^2
head(pr.var)
```
Calculating the variance explained by each principal component over total
```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```
Can also make a scree plot + other plots
```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```
```{r}
## ggplot based graph
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```

### Communicating PCA results
>Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean", 1]
```
wisc.pr$rotaion[,1] represents how strongly this influences PC1. Since the loading is -0.26, it means that it has a negative contribution to PC1. In context of breast cancer, it signifies that cells with more concave points will have lower PC1 scores.   


>Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
cumsum(pve) >= 0.8
```
Five principal components are required to explain 80% of the variance of the data. 


## Hierarchical clustering

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```
`data.scale`is the same as `wisc.df.scale` done earlier

Calculate the (Euclidean) distances between all pairs of observations in the new scaled dataset 
```{r}
data.dist <- dist(data.scaled)
```

Create a hierarchical clustering model
```{r}
wisc.hclust <- hclust(data.dist, method="complete")
```

## Results of hierarchical clustering

>Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```
The height with four cluster is between 15 and 20. 

## Selecting number of clusters

Cutting the tree so there are only 4 clusters
```{r}
wisc.hclust.clusters <- cutree(wisc.hclust,k=4)
```
Use table to compare the cluster to actual diagnosis
```{r}
table(wisc.hclust.clusters, diagnosis)
```

>Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

```{r}
table(cutree(wisc.hclust,k=4), diagnosis)
```
From clusters 2 and 10, 4 is the best with the most amount of separation between benign and malignant ane little fragmentation. 

>Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

```{r}
wisc.single <- hclust(data.dist, method="single")
wisc.complete <- hclust(data.dist, method="complete")
wisc.average <- hclust(data.dist, method="average")
wisc.ward <- hclust(data.dist, method="ward.D2")

single.clusters <- cutree(wisc.single,k=4)
table(single.clusters, diagnosis)

complete.clusters <- cutree(wisc.complete,k=4)
table(complete.clusters, diagnosis)

average.clusters <- cutree(wisc.average,k=4)
table(average.clusters, diagnosis)

ward.clusters <- cutree(wisc.ward,k=4)
table(ward.clusters, diagnosis)

```
The `ward.D2` method worked the best. It created the clearest separation between malignant and benign cells as cluster 1 had all malignant and cluster 3 is mostly benign. The `single` and `average` created one big mixed cluster and `complete` had more mixing than the `ward`. 

## Optional: K-menas clustering

Using kmeans

```{r}
wisc.km <- kmeans(wisc.data.scaled, centers=2, nstart=20)
```
Comparing kmeans to actual diagnoses
```{r}
table(wisc.km$cluster, diagnosis)
```
>Q14. How well does k-means separate the two diagnoses? How does it compare to your hclust results?

It was able to separate the two diagnoses fairly well using the k-mean. It is slightly better than the hclust with four clusters but a lot better if only using two clusters in hclust. There are a little less mixing within each cluster.

```{r}
table(wisc.hclust.clusters, wisc.km$cluster)
```
Clusters 1,2,4 from hierarchical are equivalents to cluster 2 from kmeans, and cluster 3 is equivalent to kmeans cluster 1. 

##Combining methods

### Clustering on PCA results

```{r}
n <- which(cumsum(pve) >= 0.9)
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:n]), method="ward.D2")
plot(wisc.pr.hclust)
```
Two distinct clusters seen. 


```{r}
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
```
```{r}
table(grps, diagnosis)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
```
```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
```
Switching color so it match each other by releveling
```{r}
g <- as.factor(grps)
levels(g)
```
```{r}
g <- relevel(g,2)
levels(g)
```
```{r}
# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```

Note: can make 3D plots using `rgl` and `ploty` packages (not included here for pdf submission)
```{r}
#library(rgl)
#plot3d(wisc.pr$x[,1:3], xlab="PC 1", ylab="PC 2", zlab="PC 3", cex=1.5, size=1, type="s", col=grps)
```


```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")
```
Model into 2 clusters
```{r}
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
```


>Q15. How well does the newly created model with four clusters separate out the two diagnoses?

```{r}
# Compare to actual diagnoses
table(wisc.pr.hclust.clusters, diagnosis)
```
This is even better than before. It is cleaner with less mixing. 

>Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

```{r}
table(wisc.km$cluster, diagnosis)
table(wisc.hclust.clusters, diagnosis)
```
These two methods separate them fairly decently as there are clear clusters of where there are majority of one diagnosis over the other.


## Sensitivity/Specificity

>Q17. Which of your analysis procedures resulted in a clustering model with the best specificity? How about sensitivity?

```{r}
table(wisc.pr.hclust.clusters, diagnosis)
table(wisc.km$cluster, diagnosis)
table(wisc.hclust.clusters, diagnosis)
```
For `ward` hcluster:
Sensitivity = 188/(188+24) = 0.887
Specificity = 329/(329+28) = 0.922

For kmeans:
Sensitivity = 175/(175+37) = 0.825
Specificity = 343/(343+14) = 0.961

For `complete` hcluster:
Sensitivity = 165/(165+40+5+2) = 0.778
Specificity = 343/(343+12+2) = 0.961

For specificity, kmeans and the `complete` hcluster performs the best, while for sensitivity, `ward` hcluster is the best. 

## Prediction

```{r}
#url <- "new_samples.csv"
url <- "C:/Users/sabri/Downloads/new_samples.csv"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=g)
points(npc[,14], npc[,4], col="blue", pch=16, cex=3)
text(npc[,14], npc[,4], c(1,2), col="white")
```
>Q18. Which of these new patients should we prioritize for follow up based on your results?

Patient 2 should be prioritize as it is more likely that he/she has a malignant one based on the prediction. 



