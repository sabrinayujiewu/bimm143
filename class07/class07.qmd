---
title: "Class07 Machine Learning 1"
author: "Sabrina Wu"
format: gfm
---

#First up kmeans()

Demo of using kmeans() function in base R. First make up some data with known structure.

```{r}
tmp <- c(rnorm(30,-3), rnorm(30,3))
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

Now we have made up data in `x` let's see how kmeans works with this data

```{r}
k <- kmeans(x,center =2, nstart =20)
k

```
>Q. How many points are in each cluster

```{r}
k$size
```

>Q. How do we get to the cluster membership/assignment.

```{r}
k$cluster
```
>Q. What about cluster centers?

```{r}
k$centers
```

Now we got the main results, let's use them to plot our data with the kmeans result

```{r}
plot(x, col=k$cluster)
points(k$centers, col="blue", pch=15)
```


## Now for hclust()

We will cluster the same data `x` with the `hclust()`. In this case `hclust()` requires a distance matrix as input.

```{r}
hc <- hclust( dist(x))
hc
```

Let's plot our hclust result

```{r}
plot(hc)
```

To get our cluster membership vector we need to "cut" the tree with the `cutree()`.

```{r}
grps <- cutree(hc,h=8)
grps
```
Now plot our data with thte hclust() results

```{r}
plot(x, col=grps)
```

#Principal Component Abnalysis (PCA)

## PCA of UK food data

Read data from website and try a few visualizations.

```{r}
url <- "UK_foods.csv"
x <- read.csv(url)
x
```
> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
dim(x)
```
There are 17 rows and 5 columns in the dataset. 

```{r}
## Preview the first 6 rows
head(x)
```
```{r}
# Moving the names from the first column
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```
```{r}
#New Dimension after move
dim(x)
```
-or- can also just set this from the beginning
```{r}
x <- read.csv(url, row.names=1)
head(x)
```
>Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

The second method of putting the command directly into the `read.csv()` is more robust. If you run the first approach of `x[,-1]` it will keep subtracting the first column beyond just the name column.  



```{r}
barplot(as.matrix(x),col=rainbow(nrow(x)))
```

```{r}
barplot(as.matrix(x),col=rainbow(nrow(x)), beside=TRUE)
```
>Q3: Changing what optional argument in the above barplot() function results in the following plot?

By changing the `beside` part of the function into `beside=FALSE` or just deleting it, it makes it into a stacked column. The default is set as false therefore just deleting it will do the same thing. 

```{r}
pairs(x, col=rainbow(nrow(x)))
```
>Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

The code `pair()` compares each of the countries with each other. If a give point lies on the the diagonal for a given plot, they consumed the same amount of that food item in both countries.   

>Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

N.Ireland varies a lot more on the blue point (fresh fruits) which is much higher above the diagonal and the green point (potatoes) which is lower than the diagonal compared to the other countries of the UK.

PCA to the rescue!!
The main base R PCA function is called `pcomp()` and we will need to give it the tranpose of our input data!
```{r}
pca <- prcomp(t(x))
summary(pca)
```

```{r}
attributes(pca)
```
>Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

To make our new PCA plot (a.k.a. PCA score plot) we access `pca$x`
```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```
> Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
country_cols <- c("orange", "red","blue","green")
plot(pca$x[,1], pca$x[,2])
text(pca$x[,1], pca$x[,2], colnames(x), col=country_cols)
```
Below we can use the square of pca$sdev , which stands for “standard deviation”, to calculate how much variation in the original data each PC accounts for.
```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```
```{r}
## or the second row here...
z <- summary(pca)
z$importance
```
```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

Digging Deeper (variable loadings)

```{r}
## Lets focus on PC1 
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```
The largest positive loading scores that push N.Ireland to right positive side is potatoes and soft drinks. The highest negative scores that push other countries to the elft side of the plot is fresh fruit and alcoholic drinks. 

>Q9: Generate a similar ‘loadings plot’ for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```
The largest positive loading scores in PC2 that push N.Ireland to right positive side is soft drinks. The highest negative scores that push other countries to the left side of the plot is fresh potatoes.

### Using ggplot
```{r}
library(ggplot2)

df <- as.data.frame(pca$x)
df_lab <- tibble::rownames_to_column(df, "Country")

# Our first basic plot
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country) + 
  geom_point()
```

Make it look nicer
```{r}
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country, label=Country) + 
  geom_hline(yintercept = 0, col="gray") +
  geom_vline(xintercept = 0, col="gray") +
  geom_point(show.legend = FALSE) +
  geom_label(hjust=1, nudge_x = -10, show.legend = FALSE) +
  expand_limits(x = c(-300,500)) +
  xlab("PC1 (67.4%)") +
  ylab("PC2 (28%)") +
  theme_bw()
```

Graphing the loadings
```{r}
ld <- as.data.frame(pca$rotation)
ld_lab <- tibble::rownames_to_column(ld, "Food")

ggplot(ld_lab) +
  aes(PC1, Food) +
  geom_col() 
```

```{r}
ggplot(ld_lab) +
  aes(PC1, reorder(Food, PC1), bg=PC1) +
  geom_col() + 
  xlab("PC1 Loadings/Contributions") +
  ylab("Food Group") +
  scale_fill_gradient2(low="purple", mid="gray", high="darkgreen", guide=NULL) +
  theme_bw()
```

###Biplots
```{r}
## The inbuilt biplot() can be useful for small datasets 
biplot(pca)
```

## PCA of RNA-seq data
```{r}
url2 <- "expression.csv"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```
> Q10: How many genes and samples are in this data set?

```{r}
dim(rna.data)
```
There are 100 genes and 10 samples in the dataset.

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
text(pca$x[,1], pca$x[,2], colnames(rna.data))
```


```{r}
summary(pca)
```
92.6% of the variance is captured by PC1, and the first two PCs captures 94.9% of variance. 

```{r}
plot(pca, main="Quick scree plot")
```
PC1 accounts for the majority.

Plotting the variance accounted by the difference PC
```{r}
## Variance captured per PC 
pca.var <- pca$sdev^2

## Percent variance is often more informative to look at 
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
```
```{r}
barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")
```
```{r}
## A vector of colors for wt and ko samples
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"

plot(pca$x[,1], pca$x[,2], col=colvec, pch=16,
     xlab=paste0("PC1 (", pca.var.per[1], "%)"),
     ylab=paste0("PC2 (", pca.var.per[2], "%)"))

text(pca$x[,1], pca$x[,2], labels = colnames(rna.data), pos=c(rep(4,5), rep(2,5)))
```

Using ggplot
```{r}
library(ggplot2)

df <- as.data.frame(pca$x)

# Our first basic plot
ggplot(df) + 
  aes(PC1, PC2) + 
  geom_point()
```
```{r}
# Add a 'wt' and 'ko' "condition" column
df$samples <- colnames(rna.data) 
df$condition <- substr(colnames(rna.data),1,2)

p <- ggplot(df) + 
        aes(PC1, PC2, label=samples, col=condition) + 
        geom_label(show.legend = FALSE)
p
```
Adding titles
```{r}
p + labs(title="PCA of RNASeq Data",
       subtitle = "PC1 clealy seperates wild-type from knock-out samples",
       x=paste0("PC1 (", pca.var.per[1], "%)"),
       y=paste0("PC2 (", pca.var.per[2], "%)"),
       caption="Class example data") +
     theme_bw()
```

Finding the loading that contributes most to pc1
```{r}
loading_scores <- pca$rotation[,1]

## Find the top 10 measurements (genes) that contribute
## most to PC1 in either direction (+ or -)
gene_scores <- abs(loading_scores) 
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)

## show the names of the top 10 genes
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes  
```
